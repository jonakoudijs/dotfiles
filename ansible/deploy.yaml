---
- name: Deploy MacOS Development Environment
  hosts: localhost
  connection: local
  ignore_errors: true

  pre_tasks:
    - name: Import variable files
      ansible.builtin.include_vars:
        dir: vars
        extensions:
          - "yaml"
      tags:
        - always

  tasks:
    ## bash shell
    - name: Check current (default) shell
      ansible.builtin.shell: dscl . -read /Users/{{ ansible_env.USER }} UserShell
      register: current_shell
      changed_when: false
      tags:
        - shell
    - name: Set default shell to Bash
      ansible.builtin.shell: chsh -s /bin/bash
      when: (current_shell.stdout | split(' '))[1] != "/bin/bash"
      tags:
        - shell
    - name: Configure Bash shell
      ansible.builtin.copy:
        src: "{{ item.file }}"
        dest: "{{ item.dest }}"
      with_items:
        - file: files/bash_profile
          dest: "{{ ansible_env.HOME }}/.bash_profile"
        - file: files/bashrc
          dest: "{{ ansible_env.HOME }}/.bashrc"
      tags:
        - shell
    - name: Configure Starship
      ansible.builtin.copy:
        src: files/starship.toml
        dest: "{{ ansible_env.HOME }}/.config/starship.toml"
      tags:
        - shell

    - name: Create Ghostty config directory
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.config/ghostty"
        state: directory
    - name: Configure Ghostty
      ansible.builtin.copy:
        src: files/ghostty-config
        dest: "{{ ansible_env.HOME }}/.config/ghostty/config"
      tags:
        - ghostty
        - shell

    - name: Create Helix config directory
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.config/helix"
        state: directory
    - name: Configure Helix
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      with_items:
        - src: files/helix-config
          dest: "{{ ansible_env.HOME }}/.config/helix/config.toml"
        - src: files/helix-languages
          dest: "{{ ansible_env.HOME }}/.config/helix/languages.toml"
      tags:
        - helix
        - shell

    - name: Configure k9s
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      with_items:
        - src: files/k9s-config
          dest: "{{ ansible_env.HOME }}/Library/Application Support/k9s/config.yaml"
        - src: files/k9s-skin
          dest: "{{ ansible_env.HOME }}/Library/Application Support/k9s/skins/jona_default.yaml"
      tags:
        - k9s
        - shell

    ## packages
    - name: Install Homebrew taps
      community.general.homebrew_tap:
        name: "{{ homebrew_taps }}"
        state: present
      tags:
        - homebrew
        - homebrew-taps
        - packages
    - name: Install Homebrew casks
      community.general.homebrew_cask:
        name: "{{ homebrew_casks }}"
        state: present
      tags:
        - homebrew
        - homebrew-casks
        - packages
    - name: Install Homebrew packages
      community.general.homebrew:
        name: "{{ homebrew_packages }}"
        state: present
      tags:
        - homebrew
        - homebrew-packages
        - packages
    - name: Install Mac App Store applications
      community.general.mas:
        id: "{{ macos_applications | map(attribute='id') | list }}"
        state: present
      tags:
        - mas
        - packages
    - name: Configure git client
      community.general.git_config:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        scope: "{{ item.scope | default('global') }}"
      with_items: "{{ git_config }}"
      tags:
        - git
    
    ## system
    - name: Configure MacOS Defaults
      community.general.osx_defaults:
        domain: "{{ item.domain | default(omit) }}"
        key: "{{ item.key | default(omit) }}"
        type: "{{ item.type }}"
        value: "{{ item.value }}"
        state: present
      notify: "{{ item.notify | default(omit) }}"
      with_items: "{{ macos_defaults }}"
      tags:
        - macos
        - defaults
    
    ## vscodium
    - name: Install VSCodium extensions
      ansible.builtin.command: "codium --install-extension {{ item }}"
      with_items: "{{ vscodium_extensions }}"
      changed_when: false
      tags:
        - vscode
        - vscode-extensions
        - vscodium
        - vscodium-extensions


  handlers:
    - name: Kill Dock
      shell: killall "Dock" > /dev/null 2>&1
    - name: Kill Finder
      shell: killall "Finder" > /dev/null 2>&1
